{"version":3,"file":"static/js/395.4e16d17a.chunk.js","mappings":"0LAyBA,EAtBe,SAAHA,GAA0C,IAApCC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAQH,EAARG,SAAUC,EAAQJ,EAARI,SACrC,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,eAAeG,QAASR,EAAGM,SACzCH,KAEHC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,QACNC,EAAAA,EAAAA,KAAA,SACEP,GAAIA,EACJS,KAAK,QACLC,IAAI,IACJC,IAAI,IACJV,MAAOA,EACPC,SAAU,SAAAU,GAAK,OAAIV,EAASF,EAAIa,OAAOD,EAAME,OAAOb,OAAO,KAE7DM,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAId,E,oBCiDA,MApEA,SAAmBS,GACjB,IAAAC,GAAsCC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAG5BI,EAAkB,SAACC,GACvBF,EAAeE,GACfR,EAAMS,oBACR,EAEMC,EAAaC,KAAKC,KACtBZ,EAAMa,QAAUb,EAAMa,QAAQC,OARX,GAQmC,GAGxD,OACEtB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,cACLwB,IAAlBf,EAAMa,SACLxB,EAAAA,EAAAA,MAAA2B,EAAAA,SAAA,CAAAzB,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvBS,EAAMa,QACJI,MAjBQ,GAkBPZ,EAlBO,IAmBNA,EAAc,IAEhBa,KAAI,SAACC,GAAI,OACR3B,EAAAA,EAAAA,KAAC4B,EAAM,CAELhC,SAAU+B,EAAK/B,SACfH,GAAIkC,EAAKlC,GACTC,MAAOiC,EAAKE,UAAYF,EAAKE,UAAY,EACzClC,SAAUa,EAAMb,UAJXgC,EAAKlC,GAKV,OAGRI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACxB+B,EAAAA,EAAAA,GAAIC,MAAMb,GAAYc,QAAQN,KAAI,SAACV,GAAU,OAC5ChB,EAAAA,EAAAA,KAAA,UAEEiC,QAAS,kBAAMlB,EAAgBC,EAAW,EAC1ClB,UAAWkB,IAAeH,EAAc,SAAW,GAAGd,SAErDiB,EAAa,GAJTA,EAKE,IAEVH,EAAcK,EAAa,IAC1BlB,EAAAA,EAAAA,KAAA,UACEiC,QAAS,kBAAMlB,EAAgBF,EAAc,EAAE,EAC/Cf,UAAU,YAIfe,IAAgBK,EAAa,IAC5BlB,EAAAA,EAAAA,KAAAwB,EAAAA,SAAA,CAAAzB,UACEF,EAAAA,EAAAA,MAAA,UAAQoC,QAASzB,EAAM0B,UAAWpC,UAAU,QAAOC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAACC,EAAAA,EAAAA,KAACmC,EAAAA,EAAe,CAACC,KAAMC,EAAAA,SACpDrC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAAC,8BAQrCC,EAAAA,EAAAA,KAAA,WAAAD,SAAS,6BAIjB,C","sources":["pages/Prueba/SliderSimple.jsx","pages/Prueba/Preguntas.jsx"],"sourcesContent":["import React from 'react';\nimport './Slider.css';\n\nconst Slider = ({ id, value, onChange ,pregunta}) => {\n  return (\n    <div className=\"slider-container\">\n      <label className=\"slider-label\" htmlFor={id}>\n        {pregunta}\n      </label>\n      <div className=\"slider-input-container\">\n        <span>No</span>\n        <input\n          id={id}\n          type=\"range\"\n          min=\"0\"\n          max=\"4\"\n          value={value}\n          onChange={event => onChange(id, Number(event.target.value))}\n        />\n        <span>Si</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useState } from \"react\";\nimport Slider from \"./SliderSimple\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nfunction Preguntas(props) {\n  const [currentPage, setCurrentPage] = useState(0);\n  const itemsPerPage = 12;\n\n  const handlePageClick = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    props.handleSaveProgress();\n  };\n\n  const totalPages = Math.ceil(\n    props.answers ? props.answers.length / itemsPerPage : 1\n  );\n\n  return (\n    <div className=\"preguntas\">\n      {props.answers !== undefined ? (\n        <>\n          <div className=\"preguntas\">\n            {props.answers\n              .slice(\n                currentPage * itemsPerPage,\n                (currentPage + 1) * itemsPerPage\n              )\n              .map((item) => (\n                <Slider\n                  key={item.id}\n                  pregunta={item.pregunta}\n                  id={item.id}\n                  value={item.respuesta ? item.respuesta : 0}\n                  onChange={props.onChange}\n                />\n              ))}\n          </div>\n          <div className=\"action-bar\">\n          <div className=\"pagination\">\n            {[...Array(totalPages).keys()].map((pageNumber) => (\n              <button\n                key={pageNumber}\n                onClick={() => handlePageClick(pageNumber)}\n                className={pageNumber === currentPage ? \"active\" : \"\"}\n              >\n                {pageNumber + 1}\n              </button>\n            ))}\n            {currentPage < totalPages - 1 && (\n              <button\n                onClick={() => handlePageClick(currentPage + 1)}\n                className=\"next\"\n              ></button>\n            )}\n          </div>\n          {currentPage === totalPages - 1 && (\n            <>\n              <button onClick={props.buscarDon} className=\"boton\">\n                <div className=\"boton-parte\"><FontAwesomeIcon icon={faSearch} /></div>\n                <div className=\"boton-parte\">Buscar mi don</div>\n              </button>\n              {/* <button onClick={props.handleResetClick} className=\"boton\">Reset</button> */}\n            </>\n          )}\n          </div>\n        </>\n      ) : (\n        <section>no puedes ver preguntas</section>\n      )}\n    </div>\n  );\n}\nexport default Preguntas;\n"],"names":["_ref","id","value","onChange","pregunta","_jsxs","className","children","_jsx","htmlFor","type","min","max","event","Number","target","props","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","handlePageClick","pageNumber","handleSaveProgress","totalPages","Math","ceil","answers","length","undefined","_Fragment","slice","map","item","Slider","respuesta","_toConsumableArray","Array","keys","onClick","buscarDon","FontAwesomeIcon","icon","faSearch"],"sourceRoot":""}